{"version":3,"sources":["classes/game_objects/ship/ship.tsx","classes/game_objects/bullet/bullet.tsx","utils/logic/game_logic.ts","utils/logic/canvas_management.ts","classes/game_objects/shield/shield.tsx","components/animations/transition.tsx","components/pages/game_board/game_board.tsx","components/styled_components/menu_styled_components.tsx","components/styled_components/about_page_styled_components.tsx","components/pages/about/about.tsx","components/pages/menu/menu.tsx","components/pages/score/score.tsx","components/routes/routes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Ship","color","posX","posY","size","type","health","speed","points","dir","ctx","this","_drawPlayerShip","_drawEnemyShip","baseH","bodyH","bodyW","clawH","beginPath","rect","fillStyle","fill","closePath","canonH","Bullet","vel","dmg","GL","bullets","playgroundHeight","filter","b","enemies","count","e","length","i","player","enemy","v","index","find","collX","shields","some","s","_shieldLayout","r","x0","x1","collY","y11","y12","y21","y22","x11","x12","x21","x22","CM","playgroundWidth","clearRect","ships","forEach","drawShip","draw","drawShield","Shield","parts","x","y","width","height","buildShieldLayout","calculateLayout","extrudeBoxes","n","sqrt","Math","Number","isInteger","isInt","sqrt2","n2","parseInt","box1","floor","y0","y1","box2","box3","push","h","li","li1","undefined","c","bullet","findIndex","block","el","slice","splice","fadeIn","keyframes","StyledWrapper","styled","div","Wrapper","children","GameBoard","props","enemyGen","isMovinRight","isMovinLeft","isShooting","generatorRunning","enemiesShot","btfld","nextShotIn","nextEnemyShotIn","nextSpeedBoostIn","game_settings","state","hit","wave","enemyLimit","maxScore","score","playerLives","hasLost","loopId","shieldsDeployed","window","innerHeight","innerWidth","document","getElementById","getContext","handleKeyDown","bind","handleKeyUp","handleAccelerometer","handleTapDown","handleTapUp","initalizeVars","addEventListener","scale","initGame","initialXPos","initialYPos","Array","maxShieldWidth","spacing","posx","setState","buildShip","ev","key","innerHTML","accelerationIncludingGravity","z","prepareGameScreen","setInterval","clean","setTimeout","generateBullets","moveEls","next","done","executeGame","value","clearInterval","nextPos","every","ship","shootShields","includes","shipI","isAbleToShoot","maxTravel","checkBulletCollision","cenemiesRes","cleanEnemies","cleanBullets","checkCollision","d","Object","assign","fatherx","fathery","isEnemy","limit","enemiesPerRow","posYNewRow","xoffset","posXNewShip","j","hs","localStorage","getItem","nhs","setItem","toString","recordScore","to","style","position","className","id","React","Component","MenuScreen","MenuItemList","MenuItem","MenuItemContent","Title","SubTitle","AboutPage","AboutParagraph","About","redirectTo","path","margin","textAlign","onClick","Menu","Score","ms","Routes","exact","component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5d79f3f1.chunk.js","sourcesContent":["\r\nexport class Ship {\r\n\r\n    constructor(\r\n        public color: any | undefined = '',\r\n        public posX: number = 0,\r\n        public posY: number = 0,\r\n        public size: number = 0,\r\n        public type: string = '', // player or enemy\r\n        public health: number = 0,\r\n        public speed: number = 0,\r\n        public points: number = 0,\r\n        public dir?: string,\r\n    ) {\r\n\r\n    }\r\n\r\n    drawShip(ctx: CanvasRenderingContext2D) {\r\n        switch (this.type) {\r\n            case 'player': return this._drawPlayerShip(ctx);\r\n            case 'enemy': return this._drawEnemyShip(ctx);\r\n            default: return ctx;\r\n        }\r\n    }\r\n\r\n    private _drawEnemyShip(ctx: CanvasRenderingContext2D) {\r\n        const baseH = this.size / 3;  // lower end of the ship\r\n        const bodyH = this.size / 3;  // middle part\r\n        const bodyW = this.size / 2;  // middle part\r\n        const clawH = this.size / 4;  // claws or front part\r\n        ctx.beginPath();\r\n        ctx.rect(this.posX, this.posY, this.size, baseH);\r\n        ctx.rect(this.posX + this.size / 2 - bodyW / 2, this.posY + baseH, bodyW, bodyH);\r\n        ctx.rect(this.posX, this.posY + baseH + bodyH, clawH, clawH);\r\n        ctx.rect(this.posX + this.size - clawH, this.posY + baseH + bodyH, clawH, clawH);\r\n        ctx.fillStyle = this.color;\r\n        ctx.fill();\r\n        ctx.closePath();\r\n        return ctx;\r\n    }\r\n\r\n    private _drawPlayerShip(ctx: CanvasRenderingContext2D) {\r\n        const baseH = this.size / 3;// lower end of the ship\r\n        const canonH = this.size / 3; // middle part\r\n        ctx.beginPath();\r\n        ctx.rect(this.posX + this.size / 2 - this.size / 8, this.posY, this.size / 4, canonH); // draw cannon\r\n        ctx.rect(this.posX, this.posY + canonH, this.size, baseH);\r\n        ctx.fillStyle = this.color;\r\n        ctx.fill();\r\n        ctx.closePath();\r\n        return ctx;\r\n    }\r\n}\r\n","export class Bullet {\r\n    constructor(\r\n        public color: string = '',\r\n        public dir: string = 'up',\r\n        public vel: number = 0,\r\n        public posX: number = 0,\r\n        public posY: number = 0,\r\n        public size: number = 0,\r\n        public dmg: number = 0\r\n    ) { }\r\n\r\n    draw(ctx: CanvasRenderingContext2D){\r\n        ctx.beginPath()\r\n        ctx.rect(this.posX, this.posY, this.size, this.size)\r\n        ctx.fillStyle = this.color\r\n        ctx.fill()\r\n        ctx.closePath()\r\n    }\r\n}","import { Bullet } from \"../../classes/game_objects/bullet/bullet\"\r\nimport { Shield } from \"../../classes/game_objects/shield/shield\"\r\nimport { Ship } from \"../../classes/game_objects/ship/ship\"\r\n\r\n/**\r\n * Game Logic class container\r\n */\r\nexport class GL {\r\n    /**\r\n     * Checks collission on the Y axis between a target and a \"moving\" element\r\n     * @param y11 target element original Y coordinate\r\n     * @param y12 target element original Y coordinate plus the element's size (height)\r\n     * @param y21 moving element original Y coordinate\r\n     * @param y22 moving element original Y coordinate plus the element's size (height)\r\n     * @returns \r\n     */\r\n    static collY = (y11: number, y12: number, y21: number, y22: number) =>\r\n        (y21 >= y11 && y21 <= y12) || (y22 >= y11 && y22 <= y12)\r\n\r\n    /**\r\n     * Checks collission on the X axis between a target and a \"moving\" element\r\n     * @param x11 target element original X coordinate\r\n     * @param x12 target element original X coordinate plus the element's size (width)\r\n     * @param x21 moving element original X coordinate\r\n     * @param x22 moving element original X coordinate plus the element's size (width)\r\n     * @returns \r\n     */\r\n    static collX = (x11: number, x12: number, x21: number, x22: number) =>\r\n        (x21 >= x11 && x21 <= x12) || (x22 >= x11 && x22 <= x12)\r\n\r\n    /**\r\n     * Clears all the bullets that are either outside of the screen or have damaged a ship\r\n     * @param bullets \r\n     * @returns \r\n     */\r\n    static cleanBullets(bullets: Array<Bullet>, playgroundHeight: number) {\r\n        // Erase bullets out of screen\r\n        return bullets.filter(b => b.posY <= playgroundHeight && b.posY + b.size >= 0 && b.dmg > 0)\r\n    }\r\n\r\n    /**\r\n     * Clears all enemy ships that are either out of the screen or have 0 health points\r\n     * @param enemies \r\n     * @returns \r\n     */\r\n    static cleanEnemies(enemies: Array<Ship>, playgroundHeight: number) {\r\n        const count = enemies.filter(e => e.posY + e.size > playgroundHeight).length;\r\n        return { enemies: enemies.filter(e => e.posY + e.size <= playgroundHeight && e.health > 0), count };\r\n    }\r\n\r\n    /**\r\n     * Decides whether an enemy is able or not to shoot at the player\r\n     * @param i \r\n     * @param enemies \r\n     * @returns \r\n     */\r\n    static isAbleToShoot(i: number, enemies: Ship[], player: Ship) {\r\n        if (i >= enemies.length) return false;\r\n        const enemy = enemies[i];\r\n        const intrr = enemies.filter((v, index) => index !== i).find(e => GL.collX(enemy.posX, enemy.posX + enemy.size, e.posX, e.posX + e.size) && enemy.posY < e.posY + e.size);\r\n        return !intrr && GL.collX(enemy.posX, enemy.posX + enemy.size, player.posX - player.speed, player.posX + player.size + player.speed);\r\n    }\r\n\r\n    static shootShields(i: number, enemies: Ship[], shields: Shield[]) {\r\n        if (i >= enemies.length) return false;\r\n        const enemy = enemies[i];\r\n        const intrr = enemies.filter((v, index) => index !== i).find(e => GL.collX(enemy.posX, enemy.posX + enemy.size, e.posX, e.posX + e.size) && enemy.posY < e.posY + e.size);\r\n        return !intrr && shields.some(s => s._shieldLayout.some(r => r.some(b => (GL.collX(enemy.posX, enemy.posX + enemy.size, b.x0, b.x1)))));\r\n    }\r\n\r\n}","import { Bullet } from \"../../classes/game_objects/bullet/bullet\";\r\nimport { Shield } from \"../../classes/game_objects/shield/shield\";\r\nimport { Ship } from \"../../classes/game_objects/ship/ship\";\r\n\r\nexport class CM {\r\n    /**\r\n     * Cleans the canvas so a new frame can be rendered\r\n     */\r\n    static clean(ctx: CanvasRenderingContext2D, playgroundWidth: number, playgroundHeight: number) {\r\n        ctx.clearRect(0, 0, playgroundWidth, playgroundHeight);\r\n        ctx.beginPath()\r\n        ctx.rect(0, 0, playgroundWidth, playgroundHeight)\r\n        ctx.fillStyle = '#000';\r\n        ctx.fill()\r\n        ctx.closePath()\r\n    }\r\n\r\n    /**\r\n     * Draws a new frame\r\n     * @param bullets bullets on screen\r\n     * @param enemies enemies on screen\r\n     */\r\n    static draw(bullets: Bullet[], ships: Ship[], ctx: CanvasRenderingContext2D, shields: Shield[]) {\r\n        ships.forEach(s => s?.drawShip(ctx));\r\n        bullets.forEach(b => b?.draw(ctx));\r\n        shields.forEach(s => s.drawShield(ctx));\r\n    }\r\n}","import { GL } from \"../../../utils/logic/game_logic\";\r\nimport { Bullet } from \"../bullet/bullet\";\r\ninterface Box2D {\r\n    x0: number,\r\n    y0: number,\r\n    x1: number,\r\n    y1: number\r\n}\r\n/**\r\n * A weak shield that only supports one hit\r\n */\r\nexport class Shield {\r\n    _shieldLayout: Box2D[][] = []\r\n    constructor(\r\n        public parts: number, // increased number of parts increses detail, one part\r\n        // means only one block\r\n        public x: number,\r\n        public y: number,\r\n        public width: number,\r\n        public height: number,\r\n\r\n    ) {\r\n        this.buildShieldLayout()\r\n    }\r\n\r\n    private buildShieldLayout() {\r\n        this.calculateLayout(this.parts)\r\n        this.extrudeBoxes()\r\n    }\r\n\r\n    private calculateLayout(n: number) {\r\n        if (n === 1) {\r\n            this._shieldLayout.push([{ x0: this.x, x1: this.x + this.width, y0: this.y, y1: 0 }]); // y1 needs to be filled later\r\n            return;\r\n        } else if (n === 2) {\r\n            // build a 1x2 matrix\r\n            const box1: Box2D = { x0: this.x, x1: Math.floor(this.x + this.width / 2), y0: this.y, y1: 0 };\r\n            const box2: Box2D = { x0: box1.x1, x1: Math.floor(box1.x1 + this.width / 2), y0: this.y, y1: 0 };\r\n            this._shieldLayout.push([box1, box2]);\r\n            return;\r\n        } else if (n === 3) {\r\n            // build a 1x3 matrix\r\n            const box1: Box2D = { x0: this.x, x1: Math.floor(this.x + this.width / 3), y0: this.y, y1: 0 };\r\n            const box2: Box2D = { x0: box1.x1, x1: Math.floor(box1.x1 + this.width / 3), y0: this.y, y1: 0 };\r\n            const box3: Box2D = { x0: box2.x1, x1: Math.floor(box2.x1 + this.width / 3), y0: this.y, y1: 0 };\r\n            this._shieldLayout.push([box1, box2, box3]);\r\n            return;\r\n        } else {\r\n            const sqrt = Math.sqrt(n);\r\n            if (Number.isInteger(sqrt)) {\r\n                for (let i = 0; i < sqrt; i++)\r\n                    this.calculateLayout(sqrt);\r\n                return;\r\n            }\r\n            let n2 = Number.parseInt(`${n}`);\r\n            let isInt, sqrt2;\r\n            do {\r\n                sqrt2 = Math.sqrt(n2);\r\n                isInt = Number.isInteger(sqrt2);\r\n                !isInt && n2--;\r\n            } while (!isInt);\r\n            this.calculateLayout(sqrt2);\r\n            this.calculateLayout(n - n2);\r\n        }\r\n\r\n    }\r\n\r\n    private extrudeBoxes() {\r\n        const h = Math.floor(this.height / this._shieldLayout.length);\r\n        this._shieldLayout.forEach((e, i) => {\r\n            const li = this._shieldLayout[i - 1];\r\n            let li1 = li ? li[0] : undefined;\r\n            e.forEach(i => {\r\n                i.y0 = (li1?.y1 ?? i.y0);\r\n                i.y1 = (li1?.y1 ?? i.y0) + h;\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Draws a shield on the field\r\n     * @param ctx \r\n     */\r\n    drawShield(ctx: CanvasRenderingContext2D) {\r\n        this._shieldLayout.forEach(r => {\r\n            r.forEach(c => {\r\n                ctx.beginPath();\r\n                ctx.rect(c.x0, c.y0, c.x1 - c.x0, c.y1 - c.y0);\r\n                ctx.fillStyle = '#5f7';\r\n                ctx.fill();\r\n                ctx.closePath();\r\n            })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Checks if a bullet collides with the shield, reducing its health\r\n     * @param bullet \r\n     */\r\n    checkCollision(bullet: Bullet) {\r\n        for (let r of this._shieldLayout) {\r\n            const index = r.findIndex(block => GL.collX(block.x0, block.x1, bullet.posX, bullet.posX + bullet.size) &&\r\n                GL.collX(block.y0, block.y1, bullet.posY, bullet.posY + bullet.size));\r\n            if (index >= 0) {\r\n                const el = r.slice()[index];\r\n                r.splice(index, 1);\r\n                return el;\r\n            }\r\n        }\r\n    }\r\n\r\n}","import styled, { keyframes  } from 'styled-components';\r\nconst fadeIn = keyframes`\r\n    0% { opacity:0; transform: translateY(20px); }\r\n    100% { opacity:1; transform: translateY(0);}\r\n`;\r\n\r\nconst StyledWrapper = styled.div`\r\n  animation: ${fadeIn} 1s;\r\n  height: inherit;\r\n  width:  inherit;\r\n  display: inherit;\r\n  flex: inherit;\r\n  flex-direction: inherit;\r\n  align-items: inherit;\r\n  justify-content: inherit;\r\n`;\r\n\r\nconst Wrapper = ({ children }: any) => {\r\n    return <StyledWrapper>{children}</StyledWrapper>;\r\n};\r\n\r\nexport default Wrapper;","import React from 'react';\r\nimport './game_board.css';\r\nimport { Ship } from '../../../classes/game_objects/ship/ship';\r\nimport { Bullet } from '../../../classes/game_objects/bullet/bullet';\r\nimport { GL } from '../../../utils/logic/game_logic';\r\nimport { CM } from '../../../utils/logic/canvas_management';\r\nimport { Shield } from '../../../classes/game_objects/shield/shield';\r\nimport Transition from '../../animations/transition';\r\nimport * as game_settings from '../../../utils/configs/game_settings.json';\r\nimport { Redirect } from 'react-router';\r\n\r\ninterface GameState {\r\n    wave: number,\r\n    enemyLimit: number,\r\n    score: number,\r\n    maxScore: number,\r\n    hit: boolean,\r\n    playerLives: number,\r\n    hasLost: boolean,\r\n    loopId: any,\r\n    shieldsDeployed: boolean\r\n}\r\n\r\ninterface GameProps { }\r\n\r\nclass GameBoard extends React.Component<GameProps, GameState>{\r\n\r\n    //#region attributes\r\n    /**\r\n     * Array of generators to populate screen with different patterns of enemies\r\n     */\r\n    enemyGen: Array<Generator> = [];\r\n    /**\r\n     * Activated when right arrow is pressed or device is tilted to the east\r\n     */\r\n    isMovinRight: boolean = false;\r\n    /**\r\n     * Activated when left arrow is pressed or device is tilted to the west\r\n     */\r\n    isMovinLeft: boolean = false;\r\n    /**\r\n     * Activated when up arrow is pressed or a touch is detected on device screen\r\n     */\r\n    isShooting: boolean = false;\r\n    /**\r\n     * Index of the current enemy generator working\r\n     */\r\n    generatorRunning: number = 0;\r\n    /**\r\n     * Populated with the enemy ships that had shot, to prevent multi shots from the same enemy\r\n     * while keeping the number of bullets to a certain limit\r\n     */\r\n    enemiesShot: number[] = [];\r\n    /**\r\n     * Object representing the player on the screen\r\n     */\r\n    player: Ship = new Ship();\r\n    /**\r\n     * Array of bullets on the screen, filled when player or enemy fires\r\n     */\r\n    bullets: Bullet[] = [];\r\n    /**\r\n     * List of enemies created by the enemy generator array\r\n     */\r\n    enemies: Ship[] = [];\r\n    /**\r\n     * Reference to the canvas in which the game is drawn\r\n     */\r\n    btfld: HTMLCanvasElement;\r\n    /**\r\n     * Context to create 2d graphics\r\n     */\r\n    ctx: CanvasRenderingContext2D;\r\n    /**\r\n     * Timeout to prevent the player from spaming bullets\r\n     */\r\n    nextShotIn: number;\r\n    /**\r\n     * Timeout to prevent the enemy from spaming bullets\r\n     */\r\n    nextEnemyShotIn: number;\r\n    /**\r\n     * Timeout to increase the enemy speed\r\n     * @param props \r\n     */\r\n    nextSpeedBoostIn: number;\r\n    /**\r\n     * Group of shields refreshed every new game\r\n     */\r\n    shields: Shield[] = [];\r\n    /**\r\n     * How tall is the screen in which the game is being played\r\n     */\r\n    playgroundHeight: number;\r\n    /**\r\n     * The width of the screen in which the game is being played\r\n     */\r\n    playgroundWidth: number;\r\n    //#endregion\r\n\r\n    constructor(props: GameProps) {\r\n        super(props);\r\n        this.nextShotIn = 0\r\n        this.nextEnemyShotIn = 0\r\n        this.nextSpeedBoostIn = game_settings['ENEMY_SPEED_BOOST_INTERVAL']\r\n        this.state = {\r\n            hit: false,\r\n            wave: 1,\r\n            enemyLimit: game_settings['LIMIT_OF_ENEMY_SHIPS_ON_SCREEN'],\r\n            maxScore: 0,\r\n            score: 0,\r\n            playerLives: 3,\r\n            hasLost: false,\r\n            loopId: 0,\r\n            shieldsDeployed: false\r\n        }\r\n        this.playgroundHeight = window.innerHeight;\r\n        this.playgroundWidth = window.innerWidth < 420 ? window.innerWidth : 420;\r\n        this.btfld = document.getElementById('battleField') as HTMLCanvasElement\r\n        this.ctx = this.btfld?.getContext('2d') as CanvasRenderingContext2D\r\n        this.handleKeyDown = this.handleKeyDown.bind(this)\r\n        this.handleKeyUp = this.handleKeyUp.bind(this)\r\n        this.handleAccelerometer = this.handleAccelerometer.bind(this)\r\n        this.handleTapDown = this.handleTapDown.bind(this)\r\n        this.handleTapUp = this.handleTapUp.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.initalizeVars()\r\n        window.addEventListener('keydown', this.handleKeyDown)\r\n        window.addEventListener('keyup', this.handleKeyUp)\r\n        window.addEventListener('devicemotion', this.handleAccelerometer);\r\n        window.addEventListener('touchstart', this.handleTapDown);\r\n        window.addEventListener('touchend', this.handleTapUp);\r\n        this.btfld = document.getElementById('battleField') as HTMLCanvasElement\r\n        this.ctx = this.btfld?.getContext('2d') as CanvasRenderingContext2D\r\n        this.ctx.scale(1, 1)\r\n        this.initGame()\r\n    }\r\n\r\n    /**\r\n     * Locates the player at an initial position within the canvas,\r\n     * also prepares the enemy generators\r\n     */\r\n    initalizeVars() {\r\n        const initialXPos = this.playgroundWidth / 2 - game_settings['PLAYER_SIZE'] / 2; // minus half the ship width\r\n        const initialYPos = this.playgroundHeight - game_settings['PLAYER_SIZE']; // minus the ship height\r\n        this.player = new Ship('#00ff00', initialXPos, initialYPos, 32, 'player', 100, 1)\r\n        this.bullets = Array(0);\r\n        this.enemies = Array(0);\r\n        this.enemyGen = Array(0);\r\n        this.generatorRunning = 0;\r\n        if (!this.state.shieldsDeployed) {\r\n            this.shields = Array(0);\r\n            const maxShieldWidth = Math.floor(this.playgroundWidth / 6);\r\n            const numberOfShields = 3;\r\n            const spacing = Math.floor((this.playgroundWidth - numberOfShields * (maxShieldWidth)) / numberOfShields / 2);\r\n            let posx = 0;\r\n            for (let i = 0; i < numberOfShields; i++) {\r\n                posx += spacing;\r\n                this.shields.push(new Shield(9, posx, Math.floor(this.playgroundHeight / 2) + maxShieldWidth + this.player.size, maxShieldWidth, maxShieldWidth))\r\n                posx += spacing + maxShieldWidth;\r\n            }\r\n            this.setState({ shieldsDeployed: true })\r\n        }\r\n        this.isMovinLeft = false;\r\n        this.isMovinRight = false;\r\n        this.isShooting = false;\r\n        this.enemyGen.push(this.buildShip(game_settings['PLAYER_SIZE'], 4 * (Math.floor(this.playgroundWidth / (game_settings['PLAYER_SIZE'] + 10)) - 1), 'r', 35));\r\n    }\r\n\r\n    /**\r\n     * Called when the player presses a key (COMPUTER ONLY)\r\n     * @param ev KeyboardEvent\r\n     */\r\n    handleKeyDown(ev: KeyboardEvent) {\r\n        switch (ev.key) {\r\n            case 'ArrowRight':\r\n                this.isMovinLeft = false\r\n                this.isMovinRight = true\r\n                break;\r\n            case 'ArrowLeft':\r\n                this.isMovinLeft = true\r\n                this.isMovinRight = false\r\n                break;\r\n            case 'ArrowUp':\r\n                this.isShooting = true;\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called when the player stops pressing a key (COMPUTER ONLY)\r\n     * @param ev \r\n     */\r\n    handleKeyUp(ev: KeyboardEvent) {\r\n        switch (ev.key) {\r\n            case 'ArrowRight':\r\n                this.isMovinRight = false\r\n                break;\r\n            case 'ArrowLeft':\r\n                this.isMovinLeft = false\r\n                break;\r\n            case 'ArrowUp':\r\n                this.isShooting = false\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Keeps track of the device acceleration on the x axis to move the ship left or right\r\n     * @param ev \r\n     * @returns void, prevents of running unnecessary code if no accelerometer x value is found\r\n     */\r\n    handleAccelerometer(ev: DeviceMotionEvent) {\r\n        const el = document.getElementById('debug')\r\n        if (el) {\r\n            el.innerHTML = `x: ${ev.accelerationIncludingGravity?.x} y:${ev.accelerationIncludingGravity?.y} z:${ev.accelerationIncludingGravity?.z}`\r\n        }\r\n        const x = ev.accelerationIncludingGravity?.x\r\n        if (!x) return\r\n        if (x > 0) {\r\n            this.isMovinLeft = true;\r\n            this.isMovinRight = false;\r\n        } else if (x < 0) {\r\n            this.isMovinRight = true;\r\n            this.isMovinLeft = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * When the player stops tapping on the screen, the player ship stops shooting\r\n     * @param ev \r\n     */\r\n    handleTapUp(ev: TouchEvent) { this.isShooting = false }\r\n\r\n    /**\r\n     * When the player starts tapping on the screen, the player ship starts shooting\r\n     * @param ev \r\n     */\r\n    handleTapDown(ev: TouchEvent) { this.isShooting = true }\r\n\r\n    /**\r\n     * Starts the game loop, performing drawing and collision detection calculations\r\n     */\r\n    initGame() { this.prepareGameScreen(); }\r\n\r\n    /**\r\n     * Starts the game loop once the initial animation of appearing enemies finishes\r\n     */\r\n    executeGame() {\r\n        const loopId = setInterval(() => {\r\n\r\n            // Clears the screen so a new frame can be rendered\r\n            CM.clean(this.ctx, this.playgroundWidth, this.playgroundHeight);\r\n\r\n            // Increases the enemies speed once a certain amount of time has passed\r\n            if (this.nextSpeedBoostIn === 0) {\r\n                this.enemies.forEach(s => s.speed += 0.05);\r\n                this.nextSpeedBoostIn = game_settings['ENEMY_SPEED_BOOST_INTERVAL'];\r\n                setTimeout(() => this.nextSpeedBoostIn = 0, game_settings['ENEMY_SPEED_BOOST_INTERVAL']);\r\n            }\r\n\r\n            const { posX, posY, size } = this.player;\r\n\r\n            // check if the player is shooting and generate new bullets\r\n            this.isShooting && this.bullets.push(...this.generateBullets(posX + size / 2, posY - size));\r\n\r\n            // move all the elements on screen to their new position\r\n            const { bullets, enemies } = this.moveEls();\r\n\r\n            // render the new frame\r\n            CM.draw(bullets, [...enemies, this.player], this.ctx, this.shields);\r\n\r\n            // update the bullets and enemies\r\n            this.bullets = bullets;\r\n            this.enemies = enemies;\r\n        }, 1000 / game_settings['frame_rate']);\r\n        this.setState({ loopId }); // Set the loop ID so it can be stopped once the player looses\r\n    }\r\n\r\n    /**\r\n     * Plays the animation of the enemy ships appearing on the screen.\r\n     * Once all the ships are in place the game loop starts \r\n     */\r\n    prepareGameScreen() {\r\n        setTimeout(() => {\r\n            const n = this.enemyGen[0].next();\r\n            if (!n.done) {\r\n                CM.clean(this.ctx, this.playgroundWidth, this.playgroundHeight);\r\n                this.enemies.push(n.value as Ship);\r\n                CM.draw(this.bullets, [...this.enemies, this.player], this.ctx, this.shields);\r\n                this.prepareGameScreen();\r\n            } else {\r\n                // Waits for x time to increase the enemy ships speed\r\n                setTimeout(() => this.nextSpeedBoostIn = 0, game_settings['ENEMY_SPEED_BOOST_INTERVAL']);\r\n                this.executeGame();\r\n            }\r\n        }, 100)\r\n    }\r\n\r\n    /**\r\n     * Performs calculations to move game objects \r\n     * @returns the updated enemies and bullets\r\n     */\r\n    moveEls() {\r\n        const bullets = this.bullets.slice();\r\n        const enemies = this.enemies.slice();\r\n        if (!enemies.length) {\r\n            clearInterval(this.state.loopId);\r\n            CM.clean(this.ctx, this.playgroundWidth, this.playgroundHeight);\r\n            this.setState({ wave: this.state.wave + 1 });\r\n            this.initalizeVars();\r\n            this.initGame();\r\n            return { bullets: [], enemies: [] };\r\n        }\r\n        // Player Position\r\n        // const newCount = state.nextShotIn > 0 ? state.nextShotIn - 1 : 0\r\n        let nextPos = this.player.posX;\r\n        if (this.isMovinLeft && nextPos - 1 > 0) { // dont exit playground from the left\r\n            nextPos -= game_settings['PLAYER_SPEED']; // move 1 unit to the left\r\n        } else if (this.isMovinRight && nextPos + 1 + this.player.size < this.playgroundWidth) { // dont exit playground from the right\r\n            nextPos += game_settings['PLAYER_SPEED']; // move 1 unit to the right\r\n        }\r\n        this.player.posX = nextPos;\r\n\r\n        // If there are no bullets from enemies clean the enemies shot array\r\n        bullets.filter(b => b.dir === 'down').length === 0 && this.enemiesShot.splice(0);\r\n\r\n        //#region swarm movement\r\n\r\n        // Move down if at least one enemy ship is at the border of the screen\r\n        const moveDown = enemies.every(s => s.dir === 'r') ? enemies.some(s => s.posX + s.size >= this.playgroundWidth) : enemies.some(s => s.posX <= 0)\r\n        if (moveDown) {\r\n            // checks if there is enough space for the enemy ships to decend due to the shields\r\n            // on the field\r\n            const canMoveDown = enemies.every(e => this.shields.every(s => s._shieldLayout.every(r => r.every(c => e.posY + e.size < c.y0 - e.size))))\r\n            if (canMoveDown) {\r\n                // If it is possible moves the enemies down and changes the direction in which they move\r\n                enemies.forEach(s => { s.posY += 5 + game_settings['VERTICAL_OFFSET']; s.dir = s.dir === 'r' ? 'l' : 'r' });\r\n            } else {\r\n                // If it is not possible, enemies start to aim at the shields standing on the field\r\n                enemies.forEach((ship, i) => {\r\n                    if (this.nextEnemyShotIn === 0 && GL.shootShields(i, enemies, this.shields) && !this.enemiesShot.includes(i)) {\r\n                        bullets.push(...this.generateBullets(ship.posX + ship.size / 2, ship.posY + ship.size, 'down', true));\r\n                        this.enemiesShot.push(i);\r\n                        this.nextEnemyShotIn = game_settings['ENEMY_SHOT_INTERVAL'];\r\n                        setTimeout(() => this.nextEnemyShotIn = 0, game_settings['ENEMY_SHOT_INTERVAL']);\r\n                    }\r\n                    ship.dir = ship.dir === 'r' ? 'l' : 'r';\r\n                })\r\n            }\r\n        } else {\r\n            // If not just keep moving in the same direction\r\n            enemies.forEach(s => s.posX += s.dir === 'r' ? s.speed : -s.speed);\r\n        }\r\n        const shipI = enemies.findIndex((s, i) => GL.isAbleToShoot(i, enemies, this.player) && !this.enemiesShot.includes(i));\r\n        if (shipI >= 0 && this.nextEnemyShotIn === 0) {\r\n            const ship = enemies[shipI];\r\n            bullets.push(...this.generateBullets(ship.posX + ship.size / 2, ship.posY + ship.size, 'down', true));\r\n            this.enemiesShot.push(shipI);\r\n            this.nextEnemyShotIn = game_settings['ENEMY_SHOT_INTERVAL'];\r\n            setTimeout(() => this.nextEnemyShotIn = 0, game_settings['ENEMY_SHOT_INTERVAL']);\r\n        }\r\n        //#endregion\r\n\r\n        // Move bullets - before moving bullet check if it collides and move the corresponding space to avoid\r\n        // detecting collisions after they happened\r\n        bullets.forEach(b => {\r\n            const maxTravel = this.checkBulletCollision(b, enemies, this.player, this.shields);\r\n            if (b.dir === 'up') {\r\n                b.posY -= maxTravel ?? b.vel;\r\n            } else if (b.dir === 'down') {\r\n                b.posY += maxTravel ?? b.vel;\r\n            }\r\n        })\r\n\r\n        let cenemiesRes = GL.cleanEnemies(enemies, this.playgroundHeight);\r\n        if (cenemiesRes.count) this.setState({ playerLives: this.state.playerLives - 1 });\r\n        return { bullets: GL.cleanBullets(bullets, this.playgroundHeight), enemies: cenemiesRes.enemies };\r\n    }\r\n\r\n    /**\r\n     * Calculates if a bullet collides with a ship (wheter its an enemy or the player) \r\n     * or a shield\r\n     * \r\n     * @param b bullet to check collision\r\n     * @param enemies enemies on screen\r\n     * @param player player \r\n     * @param shields list of shields on screen\r\n     * @returns the distance that can be travelled by the bullet\r\n     */\r\n    checkBulletCollision(b: Bullet, enemies: Array<Ship>, player: Ship, shields: Shield[]) {\r\n        for (let s of shields) {\r\n            const block = s.checkCollision(b);\r\n            if (block) {\r\n                b.dmg = 0;\r\n                // calculate distance that can be travelled before hitting the target\r\n                const d = b.posY - block.y1;\r\n                return d >= 0 ? d : 0;\r\n            }\r\n        }\r\n        if (b.dir === 'up') { // bullets against enemies                \r\n            const index = enemies.findIndex(e => GL.collX(e.posX, e.posX + e.size, b.posX, b.posX + b.size)\r\n                && GL.collY(e.posY, e.posY + e.size, b.posY + b.vel, b.posY + b.size + b.vel,));// check Y collision with the speed\r\n            if (index >= 0) {\r\n                const enemy = Object.assign({}, enemies[index]) as Ship;\r\n                enemy.health -= b.dmg;\r\n                if (enemy.health <= enemies[index].health / 2) {\r\n                    enemy.color = '#ff3333';\r\n                }\r\n                if (enemy.health <= 0) {\r\n                    this.setState({ score: this.state.score + (enemy.points ?? 0) });\r\n                }\r\n                enemies[index] = new Ship(enemy.color, enemy.posX, enemy.posY, enemy.size, enemy.type, enemy.health, enemy.speed, enemy.points, enemy.dir);\r\n                b.dmg = 0;\r\n                // calculate distance that can be travelled before hitting the target\r\n                const d = b.posY - enemy.posY + enemy.size;\r\n                return d >= 0 ? d : 0;\r\n            }\r\n        } else { // bullets agains player\r\n            if (GL.collX(player.posX, player.posX + player.size, b.posX, b.posX + b.size) && GL.collY(player.posY, player.posY + player.size, b.posY, b.posY + b.size)) {\r\n                let playerLives = this.state.playerLives;\r\n                let hasLost = !--playerLives ? true : false;\r\n                hasLost && clearInterval(this.state.loopId);\r\n                !hasLost && setTimeout(() => this.setState({ hit: false }), 200)\r\n                this.setState({ playerLives, hasLost, hit: true });\r\n                b.dmg = 0;\r\n                const d = player.posY - b.posY;\r\n                return d >= 0 ? d : 0;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Returns a new bullet to be drawn on the screen, if hte bullet is shot by the player\r\n     * a time limitation is set to prevent bullet spaming\r\n     * @param fatherx Where to draw the bullet on the x axis\r\n     * @param fathery Where to draw the bullet on the y axis\r\n     * @param dir Indicates the direction that the bullets travels (up or down)\r\n     * @param isEnemy Indicates if the bullet is fired by an enemy\r\n     * @returns \r\n     */\r\n    generateBullets(fatherx: number, fathery: number, dir?: string, isEnemy?: boolean) {\r\n        if (this.nextShotIn !== 0 && !isEnemy) return [];\r\n        const size = 10\r\n        !isEnemy && setTimeout(() => this.nextShotIn = 0, game_settings['shot_timeout']);\r\n        !isEnemy && (this.nextShotIn = game_settings['shot_timeout'])\r\n        return [new Bullet('#ff0000', dir ?? 'up', game_settings['BULLET_SPEED'], fatherx - size / 2, fathery, size, game_settings['BULLET_DMG'])]\r\n    }\r\n\r\n    /**\r\n     * Generator that builds a series of enemy ships\r\n     * @param size the size (WxH) of the sprites to generate\r\n     * @param limit the amount of enemies to generate\r\n     * @param dir the direction that the enemies will move\r\n     * @param posY the y axis where the enemies will start moving\r\n     */\r\n    * buildShip(size: number, limit: number, dir: string, posY: number): Generator<Ship> {\r\n        const enemiesPerRow = Math.floor(this.playgroundWidth / (size + 10)) - 1\r\n        const spacing = Math.floor((this.playgroundWidth - enemiesPerRow * (size + 10)) / enemiesPerRow / 2)\r\n        let posYNewRow = posY\r\n        let posXNewShip = 0\r\n        const xoffset = posXNewShip\r\n        for (let i = 0, j = 0; i < limit; i++, j++) {\r\n            if (j === enemiesPerRow) {\r\n                posYNewRow += size + game_settings['VERTICAL_OFFSET']\r\n                posXNewShip = xoffset as number\r\n                j = 0\r\n            }\r\n            posXNewShip += 5 + spacing// left Margin\r\n            let enemy: Ship = new Ship('#ffffff', posXNewShip, posYNewRow, size, 'enemy', game_settings['ENEMY_HP'], game_settings['ENEMY_SPEED'], 500, dir,)\r\n            posXNewShip += size + 5 + spacing// right Margin\r\n            yield enemy\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Store the new achieved score in the local storage of the browser\r\n     * to keep record of the high score\r\n     */\r\n    recordScore() {\r\n        const hs = localStorage.getItem('highScore');\r\n        if (!hs) {\r\n            localStorage.setItem('highScore', this.state.score.toString());\r\n        } else {\r\n            let nhs = +hs < this.state.score ? this.state.score : +hs;\r\n            localStorage.setItem('highScore', nhs.toString());\r\n            localStorage.setItem('matchScore', this.state.score.toString());\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasLost) {\r\n            this.recordScore();\r\n            return (\r\n                <Redirect to=\"/score\" />\r\n            )\r\n        }\r\n        return (\r\n            <Transition>\r\n                <div style={{ position: 'relative', width: this.playgroundWidth, height: this.playgroundHeight }} className={'gameboard ' + (this.state.hit ? 'shakingScreen' : '')}>\r\n                    <canvas id=\"battleField\" width={this.playgroundWidth} height={this.playgroundHeight}></canvas>\r\n                    <div className='GameStatus'>\r\n                        <div>Lives: {this.state.playerLives}</div>\r\n                        <div>Wave: {this.state.wave}</div>\r\n                        <div>Score: {this.state.score}</div>\r\n                    </div>\r\n                    {this.state.hit && <div className='shotAlert' style={{ width: this.playgroundWidth + 20, height: this.playgroundHeight }}></div>}\r\n                    {/* <div id=\"debug\" style={{ color: 'red', position: 'absolute', top: 0, left: 0, zIndex: 2 }}></div> */}\r\n                </div>\r\n            </Transition>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default GameBoard;","import styled from 'styled-components';\r\n\r\nconst MenuScreen = styled.div`\r\n    height:100%;\r\n    width: 100%;\r\n    max-width:310px;\r\n    display:flex;\r\n    flex-direction:column;\r\n    align-items:center;\r\n    justify-content:center;\r\n    background-color: black;\r\n`;\r\n\r\nconst MenuItemList = styled.div`\r\n    display:inherit;\r\n    flex-direction:inherit;\r\n    align-items:inherit;\r\n    justify-content:inherit;\r\n    width: 100%;\r\n    height: 50%;\r\n`;\r\n\r\nconst MenuItem = styled.div`\r\n    width: 70%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 4px 16px 4px 16px;\r\n    border: 1px solid white;\r\n    color: white;\r\n    margin: 10px 0;\r\n    border-radius: 5px;\r\n    text-decoration: none;\r\n    font-size: 1.5rem;\r\n    transition: 0.25s;\r\n    position: relative;\r\n    cursor: pointer;\r\n    label, span{\r\n        transition: 0.25s;\r\n        cursor: pointer;\r\n    } \r\n    span{\r\n        margin-left: 0.1em;\r\n    }\r\n    :hover{\r\n        box-shadow: inset 254px 0 0 0 white;\r\n        color: black;\r\n    }\r\n    :hover span{\r\n        margin-left: 0.3em;\r\n        transform: rotate(15deg);\r\n    }\r\n    :active{\r\n        box-shadow: inset 254px 0 0 0 white;\r\n        color: black;\r\n        transform: scale(1.5);\r\n    }\r\n`;\r\n\r\nconst MenuItemContent = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    width: 80%;\r\n    max-width: 100px;\r\n    cursor: pointer;\r\n`;\r\n\r\nconst Title = styled.div`\r\n    width:90%;\r\n    font-size:3em;\r\n    color:white;\r\n    text-align: center;\r\n    cursor: default;\r\n`;\r\n\r\nconst SubTitle = styled.div`\r\n    width:90%;\r\n    font-size:1.5em;\r\n    color:white;\r\n    text-align: center;\r\n    cursor: default;\r\n`;\r\n\r\nexport { MenuScreen, MenuItemList, Title, MenuItemContent, MenuItem, SubTitle };","import styled from \"styled-components\";\r\n\r\nconst AboutPage = styled.div`\r\n    height: 100%;\r\n    width: 100%;\r\n    max-width: 310px;\r\n    display: grid;\r\n    grid-template-rows: 100px 30px auto 100px;\r\n    grid-template-columns: 100%;\r\n    align-items: center;\r\n    justify-items: center;\r\n`;\r\n\r\nconst AboutParagraph = styled.div`\r\n    width: 100%;\r\n    max-height: calc(100%);\r\n    overflow-y: auto;\r\n    padding: 5px 0;\r\n    margin: 5px 0;\r\n    color: white;\r\n    font-size: 1.5rem;\r\n`;\r\n\r\nexport { AboutPage, AboutParagraph };","import React from 'react';\r\nimport Transition from '../../animations/transition';\r\nimport { Title, SubTitle, MenuItemContent, MenuItem, MenuItemList } from '../../styled_components/menu_styled_components';\r\nimport { AboutPage, AboutParagraph } from '../../styled_components/about_page_styled_components';\r\nimport { Redirect } from 'react-router';\r\n\r\ninterface AboutState {\r\n    redirectTo: string | null\r\n}\r\nclass About extends React.Component<{}, AboutState> {\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = {\r\n            redirectTo: null\r\n        }\r\n    }\r\n    render() {\r\n        if (this.state.redirectTo) {\r\n            return (\r\n                <Redirect push to={this.state.redirectTo}></Redirect>\r\n            )\r\n        }\r\n        return (\r\n            <Transition>\r\n                <AboutPage>\r\n\r\n                    <Title>Invaders</Title>\r\n                    <SubTitle>By: Ismael Martínez</SubTitle>\r\n\r\n                    <MenuItemList style={{height:'70%'}}>\r\n                        <SubTitle style={{ margin: '0 auto'}}>Controls</SubTitle>\r\n                        <AboutParagraph style={{textAlign:'justify'}}>\r\n                            <span style={{color:'orange'}}>PC</span> : use left and right arrow keys to move.\r\n                            Up arrow is used to shoot.\r\n                            <br></br>\r\n                            <span style={{color:'#01ff01'}}>Android</span> : tilt your phone to move. Tap to shoot.\r\n                            <br />\r\n                            <span style={{color:'#01e4ff'}}>iOS</span> : Working on a way to control the ship without the accelerometer, \r\n                            as the Acceleration API is not supported\r\n                        </AboutParagraph>\r\n                    </MenuItemList>\r\n\r\n                    <MenuItem onClick={() => this.redirectTo('/menu')}>\r\n                        <MenuItemContent>\r\n                            <label>Back</label>\r\n                            <span className=\"material-icons\">chevron_left</span>\r\n                        </MenuItemContent>\r\n                    </MenuItem>\r\n\r\n                </AboutPage>\r\n            </Transition>\r\n        )\r\n    }\r\n\r\n    redirectTo = (path: string) => this.setState({ redirectTo: path });\r\n}\r\nexport default About;","import Transition from '../../animations/transition';\r\nimport React from 'react';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { MenuItemList, MenuScreen, Title, MenuItemContent, MenuItem } from '../../styled_components/menu_styled_components'\r\n\r\ninterface MenuState {\r\n    redirectTo: string | null\r\n}\r\n\r\nclass Menu extends React.Component<{}, MenuState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            redirectTo: null\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.state.redirectTo) {\r\n            return (\r\n                <Redirect push to={this.state.redirectTo}></Redirect>\r\n            );\r\n        }\r\n        return (\r\n            <Transition>\r\n                <MenuScreen>\r\n                    <Title>INVADERS</Title>\r\n                    <MenuItemList>\r\n                        <MenuItem onClick={() => this.redirectTo('/game')}>\r\n                            <MenuItemContent>\r\n                                <label>Play</label>\r\n                                <span className=\"material-icons\">videogame_asset</span>\r\n                            </MenuItemContent>\r\n                        </MenuItem>\r\n                        <MenuItem onClick={() => this.redirectTo('/about')}>\r\n                            <MenuItemContent>\r\n                                <label>About</label>\r\n                                <span className=\"material-icons\">info</span>\r\n                            </MenuItemContent>\r\n                        </MenuItem>\r\n                        {/* <MenuItem onClick={() => this.redirectTo('/')}>\r\n                            <MenuItemContent>\r\n                                <label>Save</label>\r\n                                <span className=\"material-icons\">get_app</span>\r\n                            </MenuItemContent>\r\n                        </MenuItem> */}\r\n                    </MenuItemList>\r\n                </MenuScreen>\r\n            </Transition>\r\n        )\r\n    };\r\n\r\n    redirectTo = (path: string) => this.setState({ redirectTo: path });\r\n}\r\n\r\nexport default Menu;","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Transition from '../../animations/transition';\r\nimport { MenuItemList, MenuScreen, Title, MenuItemContent, MenuItem, SubTitle } from '../../styled_components/menu_styled_components'\r\ninterface MenuState {\r\n    redirectTo: string | null\r\n}\r\nclass Score extends React.Component<{}, MenuState> {\r\n    hs: number;\r\n    ms: number;\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            redirectTo: null\r\n        }\r\n        this.hs = +(localStorage.getItem('highScore') ?? '0');\r\n        this.ms = +(localStorage.getItem('matchScore') ?? '0');\r\n    }\r\n    render() {\r\n        if (this.state.redirectTo) {\r\n            return (<Redirect to={this.state.redirectTo} />);\r\n        }\r\n        return (\r\n            <Transition>\r\n                <MenuScreen>\r\n                    <Title>YOU LOST</Title>\r\n                    <SubTitle>{(this.ms === this.hs) ? 'New High Score' : 'Score'}: {this.ms}</SubTitle>\r\n                    <SubTitle>High Score: {this.hs}</SubTitle>\r\n                    <MenuItemList>\r\n                        <MenuItem onClick={() => this.redirectTo('/game')}>\r\n                            <MenuItemContent >\r\n                                <label>Retry</label>\r\n                                <span className=\"material-icons\">videogame_asset</span>\r\n                            </MenuItemContent>\r\n                        </MenuItem>\r\n                        <MenuItem onClick={() => this.redirectTo('/menu')}>\r\n                            <MenuItemContent >\r\n                                <label>Menu</label>\r\n                                <span className=\"material-icons\">chevron_left</span>\r\n                            </MenuItemContent>\r\n                        </MenuItem>\r\n                    </MenuItemList>\r\n                </MenuScreen>\r\n            </Transition>\r\n        );\r\n    }\r\n\r\n    redirectTo = (path: string) => this.setState({ redirectTo: path });\r\n}\r\nexport default Score;","import {\r\n    Route,\r\n    Switch,\r\n    Redirect,\r\n} from \"react-router-dom\";\r\nimport GameBoard from \"../pages/game_board/game_board\";\r\nimport About from \"../pages/about/about\";\r\nimport Menu from '../pages/menu/menu';\r\nimport Score from '../pages/score/score';\r\n\r\nconst Routes = () =>\r\n    <Switch>\r\n        <Route exact path=\"/\">\r\n            <Redirect push to=\"/menu\" />\r\n        </Route>\r\n        <Route path=\"/menu\" component={Menu} />\r\n        <Route path=\"/game\" component={GameBoard} />\r\n        <Route path=\"/score\" component={Score} />\r\n        <Route path=\"/about\" component={About} />\r\n    </Switch>\r\n\r\nexport default Routes;","\nimport './App.css';\nimport Routes from './components/routes/routes';\nimport { HashRouter as Router } from \"react-router-dom\";\n// comandos para red hospedada\n// netsh wlan set hostednetwork mode=allow ssid=testsi key=12345678\n// netsh wlan start hostednetwork\n// ($env:HTTPS = \"true\") -and (npm start)\nfunction App() {\n  return (\n    <Router>\n      <div className=\"gamescreen\">\n        <Routes />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}